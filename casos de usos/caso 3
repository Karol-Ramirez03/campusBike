4. El sistema valida y guarda la información del nuevo proveedor.

DELIMITER //

CREATE PROCEDURE insertar_proveedor(
    IN p_nombre_proveedor VARCHAR(20),
    IN p_nombre_contacto VARCHAR(20),
    IN p_telefono VARCHAR(15),
    IN p_correo_electronico VARCHAR(50),
    IN p_id_ciudad INT
)
BEGIN
    DECLARE proveedor_existe INT;
    DECLARE ciudad_existe INT;

    -- Validar que el nombre del proveedor no esté vacío
    IF p_nombre_proveedor IS NULL OR p_nombre_proveedor = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El nombre del proveedor no puede estar vacío';
    END IF;

    -- Validar que el nombre del contacto no esté vacío
    IF p_nombre_contacto IS NULL OR p_nombre_contacto = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El nombre del contacto no puede estar vacío';
    END IF;

    -- Validar que el teléfono no esté vacío y sea único
    IF p_telefono IS NULL OR p_telefono = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El teléfono no puede estar vacío';
    ELSE
        SELECT COUNT(id) INTO proveedor_existe
        FROM proveedor
        WHERE telefono = p_telefono;
        
        IF proveedor_existe > 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El teléfono ya está en uso por otro proveedor';
        END IF;
    END IF;

    -- Validar que el correo electrónico no esté vacío y sea único
    IF p_correo_electronico IS NULL OR p_correo_electronico = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El correo electrónico no puede estar vacío';
    ELSE
        SELECT COUNT(id) INTO proveedor_existe
        FROM proveedor
        WHERE correo_electronico = p_correo_electronico;
        
        IF proveedor_existe > 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El correo electrónico ya está en uso por otro proveedor';
        END IF;
    END IF;

    -- Validar que la ciudad exista
    SELECT COUNT(id) INTO ciudad_existe
    FROM ciudad
    WHERE id = p_id_ciudad;

    IF ciudad_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La ciudad no existe';
    END IF;

    -- Insertar el nuevo proveedor si todas las validaciones pasan
    INSERT INTO proveedor (nombre_proveedor, nombre_contacto, telefono, correo_electronico, id_ciudad)
    VALUES (p_nombre_proveedor, p_nombre_contacto, p_telefono, p_correo_electronico, p_id_ciudad);
END //

DELIMITER ;

CALL insertar_proveedor('Nuevo Proveedor', 'Nuevo Contacto', '60124567', 'nuevo.correo@example.com', 1);

7. El sistema valida y guarda la información del nuevo repuesto.

DELIMITER //

CREATE PROCEDURE insertar_repuesto(
    IN p_nombre_repuesto VARCHAR(20),
    IN p_descripcion_repuesto TEXT,
    IN p_precio DOUBLE,
    IN p_stock INT,
    IN p_id_proveedor INT
)
BEGIN
    DECLARE proveedor_existe INT;

    -- Validar que el nombre del repuesto no esté vacío
    IF p_nombre_repuesto IS NULL OR p_nombre_repuesto = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El nombre del repuesto no puede estar vacío';
    END IF;

    -- Validar que el precio sea mayor que 0
    IF p_precio <= 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El precio debe ser mayor que 0';
    END IF;

    -- Validar que el stock no sea negativo
    IF p_stock < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El stock no puede ser negativo';
    END IF;

    -- Validar que el proveedor exista
    SELECT COUNT(id) INTO proveedor_existe
    FROM proveedor
    WHERE id = p_id_proveedor;

    IF proveedor_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El proveedor no existe';
    END IF;

    -- Insertar el nuevo repuesto si todas las validaciones pasan
    INSERT INTO repuesto (nombre_repuesto, descripcion_repuesto, precio, stock, id_proveedor)
    VALUES (p_nombre_repuesto, p_descripcion_repuesto, p_precio, p_stock, p_id_proveedor);
END //

DELIMITER ;

CALL insertar_repuesto('Nuevo Repuesto', 'Descripción del nuevo repuesto', 100.00, 10, 1);

10. El sistema valida y guarda los cambios. actualizar proveedor

DELIMITER //

CREATE PROCEDURE actualizar_proveedor(
    IN p_id INT,
    IN p_nombre_proveedor VARCHAR(20),
    IN p_nombre_contacto VARCHAR(20),
    IN p_telefono VARCHAR(15),
    IN p_correo_electronico VARCHAR(50),
    IN p_id_ciudad INT
)
BEGIN
    DECLARE proveedor_existe INT;
    DECLARE ciudad_existe INT;
    DECLARE telefono_existe INT;
    DECLARE correo_existe INT;

    -- Validar que el proveedor exista
    SELECT COUNT(id) INTO proveedor_existe
    FROM proveedor
    WHERE id = p_id;

    IF proveedor_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El proveedor no existe';
    END IF;

    -- Validar que el nombre del proveedor no esté vacío
    IF p_nombre_proveedor IS NULL OR p_nombre_proveedor = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El nombre del proveedor no puede estar vacío';
    END IF;

    -- Validar que el nombre del contacto no esté vacío
    IF p_nombre_contacto IS NULL OR p_nombre_contacto = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El nombre del contacto no puede estar vacío';
    END IF;

    -- Validar que el teléfono no esté vacío y sea único
    IF p_telefono IS NULL OR p_telefono = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El teléfono no puede estar vacío';
    ELSE
        SELECT COUNT(id) INTO telefono_existe
        FROM proveedor
        WHERE telefono = p_telefono AND id <> p_id;
        
        IF telefono_existe > 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El teléfono ya está en uso por otro proveedor';
        END IF;
    END IF;

    -- Validar que el correo electrónico no esté vacío y sea único
    IF p_correo_electronico IS NULL OR p_correo_electronico = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El correo electrónico no puede estar vacío';
    ELSE
        SELECT COUNT(id) INTO correo_existe
        FROM proveedor
        WHERE correo_electronico = p_correo_electronico AND id <> p_id;
        
        IF correo_existe > 0 THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El correo electrónico ya está en uso por otro proveedor';
        END IF;
    END IF;

    -- Validar que la ciudad exista
    SELECT COUNT(id) INTO ciudad_existe
    FROM ciudad
    WHERE id = p_id_ciudad;

    IF ciudad_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La ciudad no existe';
    END IF;

    -- Actualizar el proveedor si todas las validaciones pasan
    UPDATE proveedor
    SET nombre_proveedor = p_nombre_proveedor,
        nombre_contacto = p_nombre_contacto,
        telefono = p_telefono,
        correo_electronico = p_correo_electronico,
        id_ciudad = p_id_ciudad
    WHERE id = p_id;
END //

DELIMITER ;


CALL actualizar_proveedor(1, 'actual Proveedor', 'actual Contacto', '601234567', 'actual.correo@example.com', 2);

13. El sistema valida y guarda los cambios. actualizar la información del repuesto.

DELIMITER //

CREATE PROCEDURE actualizar_repuesto(
    IN p_id INT,
    IN p_nombre_repuesto VARCHAR(20),
    IN p_descripcion_repuesto TEXT,
    IN p_precio DOUBLE,
    IN p_stock INT,
    IN p_id_proveedor INT
)
BEGIN
    DECLARE repuesto_existe INT;
    DECLARE proveedor_existe INT;

    -- Validar que el repuesto exista
    SELECT COUNT(id) INTO repuesto_existe
    FROM repuesto
    WHERE id = p_id;

    IF repuesto_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El repuesto no existe';
    END IF;

    -- Validar que el proveedor exista
    SELECT COUNT(id) INTO proveedor_existe
    FROM proveedor
    WHERE id = p_id_proveedor;

    IF proveedor_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El proveedor no existe';
    END IF;

    -- Validar que el nombre del repuesto no esté vacío
    IF p_nombre_repuesto IS NULL OR p_nombre_repuesto = '' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El nombre del repuesto no puede estar vacío';
    END IF;

    -- Validar que el precio sea mayor que 0
    IF p_precio <= 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El precio debe ser mayor que 0';
    END IF;

    -- Validar que el stock no sea negativo
    IF p_stock < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El stock no puede ser negativo';
    END IF;

    -- Actualizar el repuesto si todas las validaciones pasan
    UPDATE repuesto
    SET nombre_repuesto = p_nombre_repuesto,
        descripcion_repuesto = p_descripcion_repuesto,
        precio = p_precio,
        stock = p_stock,
        id_proveedor = p_id_proveedor
    WHERE id = p_id;
END //

DELIMITER ;


CALL actualizar_repuesto(1, 'Nuevo Repuesto', 'Nueva Descripción', 120.00, 15, 2);

15. El sistema elimina el proveedor seleccionado.

DELIMITER //

CREATE PROCEDURE eliminar_proveedor(
    IN p_id INT
)
BEGIN
    DECLARE proveedor_existe INT;

    -- Validar que el proveedor exista
    SELECT COUNT(id) INTO proveedor_existe
    FROM proveedor
    WHERE id = p_id;

    IF proveedor_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El proveedor no existe';
    END IF;

    -- Eliminar registros relacionados en la tabla repuesto
    DELETE FROM repuesto
    WHERE id_proveedor = p_id;

    -- Eliminar registros relacionados en la tabla compra
    DELETE FROM compra
    WHERE id_proveedor = p_id;

    -- Eliminar el proveedor
    DELETE FROM proveedor
    WHERE id = p_id;
END //

DELIMITER ;


CALL eliminar_proveedor(8);

17. El sistema elimina el repuesto seleccionado.

DELIMITER //

CREATE PROCEDURE eliminar_repuesto(
    IN p_id INT
)
BEGIN
    DECLARE repuesto_existe INT;

    -- Validar que el repuesto exista
    SELECT COUNT(id) INTO repuesto_existe
    FROM repuesto
    WHERE id = p_id;

    IF repuesto_existe = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El repuesto no existe';
    END IF;


    -- Eliminar registros relacionados en detalle_compra
    DELETE FROM detalle_compra
    WHERE id_repuesto = p_id;

    -- Eliminar el repuesto
    DELETE FROM repuesto
    WHERE id = p_id;
END //

DELIMITER ;


CALL eliminar_repuesto(7);

